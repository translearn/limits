from sympy import *
from sympy.utilities.autowrap import autowrap
import complexCodeGen
import os
import sys
import inspect
import errno
import timeit
import math
import numpy as np
import shutil
import glob
from importlib import import_module

'''
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
'''

compileCode = True  
compileComplex = True  

backend = 'cython'  
language = 'C'  
verbose = False  
buildDir = os.path.join(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))), "build")
sys.path.append(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))) 
storeBinaries = True  

a_1_velocityReducedAcceleration = []

a_1_positionBorderCaseMinJerkPhase = None
t_v0_positionBorderCaseMinJerkPhase = []

a_1_positionBorderCaseUpperBound = [[], []]  
t_v0_positionBorderCaseUpperBound = None

a_1_positionBorderCaseAllPhases = [None, None]  
t_v0_positionBorderCaseAllPhases = None

t_v0_positionBorderCaseFirstPhase = [None, None]  
a_1_positionBorderCaseFirstPhase = None

a_1_positionBorderCaseReducedJerkPhase = None
t_v0_positionBorderCaseReducedJerkPhase = []

t_u_positionBoundedVelocityContinuousAllPhases = None
a_1_positionBoundedVelocityContinuousAllPhases = None

j_n_u_plus_1_positionBoundedVelocityDiscreteAllPhases = None
a_1_positionBoundedVelocityDiscreteAllPhases = None

t_u_positionBoundedVelocityContinuousMinJerkPhase = None
a_1_positionBoundedVelocityContinuousMinJerkPhase = None

j_n_u_plus_1_positionBoundedVelocityDiscreteMinJerkPhase = None
a_1_positionBoundedVelocityDiscreteMinJerkPhase = None

t_v0_positionBoundedAccelerationAllPhasesMaxJerk = None
a_1_positionBoundedAccelerationAllPhasesMaxJerk = None

t_v0_positionBoundedAccelerationAllPhasesNoMaxJerk = [None, None]  
a_1_positionBoundedAccelerationAllPhasesNoMaxJerk = None

t_v0_positionBoundedAccelerationMinJerkPhaseMaxJerk = None
a_1_positionBoundedAccelerationMinJerkPhaseMaxJerk = None

t_v0_positionBoundedAccelerationMinJerkPhaseNoMaxJerk = []
a_1_positionBoundedAccelerationMinJerkPhaseNoMaxJerk = None

t_v0_positionBoundedAccelerationMinJerkPhaseNoMaxJerkAStarZero = None
a_1_positionBoundedAccelerationMinJerkPhaseNoMaxJerkAStarZero = None

complexPrinter = complexCodeGen.ComplexPrinter()
complexCodeGen = complexCodeGen.ComplexC99CodeGen(printer=complexPrinter, print_result=False)

loadExpressions = True  

def jointLimitColdStart(recompile=False):
    
    
    global loadExpressions
    loadExpressions = True

    if compileCode:

        if storeBinaries:
            if recompile:
                
                try:
                    if os.path.isdir(buildDir):
                        shutil.rmtree(buildDir)
                except OSError as e:
                    print("Error: %s - %s." % (e.filename, e.strerror))
        

            if not os.path.isdir(buildDir):
                try:
                    os.makedirs(buildDir)
                    print('Compiling and storing binaries')
                except OSError as e:
                    if e.errno != errno.EEXIST:
                        raise
            else:
                print('Restoring binaries')
                if compileComplex:
                    loadExpressions = False 
                    
        else:
            print('Compiling without storing binaries')


        compilerTimer = timeit.default_timer()

        velocityReducedAcceleration(minMax=0, j_min_in=-1, a_0_in=1, a_n_plus_1_star_in=0.01,
                                    v_0_in=2, v_max_in=4, tS_in=1, t_n_in=5)
        positionBorderCaseMinJerkPhase(j_min_in=-1, a_0_in=1, v_0_in=2, p_0_in=3, p_max_in=4, tS_in=5)

        positionBorderCaseFirstPhase(minMax=0, a_0_in=1, v_0_in=2, p_0_in=3, p_max_in=4, tS_in=0.1)
        positionBorderCaseFirstPhase(minMax=1, a_0_in=1, v_0_in=2, p_0_in=3, p_max_in=4, tS_in=0.1)
        positionBorderCaseUpperBound(minMax=0, j_min_in=-1, a_0_in=1, a_min_in=-10, v_0_in=2, p_0_in=3, p_max_in=4,
                                     tS_in=0.1)
        positionBorderCaseUpperBound(minMax=1, j_min_in=-1, a_0_in=1, a_min_in=-10, v_0_in=2, p_0_in=3, p_max_in=4,
                                     tS_in=0.1)
        positionBorderCaseAllPhases(minMax=0, j_min_in=-1, a_0_in=1, a_min_in=-10, v_0_in=2, p_0_in=3, p_max_in=4,
                                    tS_in=0.1, t_n_a_min_in=0.3)
        positionBorderCaseAllPhases(minMax=1, j_min_in=-1, a_0_in=1, a_min_in=-10, v_0_in=2, p_0_in=3, p_max_in=4,
                                    tS_in=0.1, t_n_a_min_in=0.3)
        positionBorderCaseReducedJerkPhase(j_min_in=-1, a_0_in=1, a_min_in=-10, v_0_in=2, p_0_in=3, p_max_in=4,
                                           tS_in=0.1, t_n_a_min_in=0.3)

        
        positionBoundedVelocityContinuousAllPhases(j_min_in=-3, j_max_in=3, a_0_in=1, a_min_in=-3, v_0_in=0.5,
                                                   p_0_in=1, p_max_in=2, tS_in=1, t_star_in=7, t_n_a_min_in=4)
        positionBoundedVelocityDiscreteAllPhases(j_min_in=-3, j_max_in=3, a_0_in=1, a_min_in=-3, v_0_in=0.5,
                                                 p_0_in=1, p_max_in=2, tS_in=1, t_star_in=7, t_n_a_min_in=4, t_n_u_in=6)
        positionBoundedVelocityContinuousMinJerkPhase(j_min_in=-3, j_max_in=3, a_0_in=1, v_0_in=0.5, p_0_in=1,
                                                      p_max_in=3, tS_in=1, t_star_in=4)
        positionBoundedVelocityDiscreteMinJerkPhase(j_min_in=-3, j_max_in=3, a_0_in=1, v_0_in=0.5, p_0_in=1,
                                                    p_max_in=3, tS_in=1, t_star_in=4, t_n_u_in=2)


        print('Operation finished after ' + str(timeit.default_timer() - compilerTimer) + ' seconds')

    loadExpressions = True

def compileOrRestoreExpression(expression, args, phaseAndVariable, expressionIndices=None, minMax=-1,
                               expressionNumber=-1, complexResult=False):
    moduleDir = getModuleDir(phaseAndVariable, minMax, expressionNumber)

    if moduleDir and os.path.isdir(moduleDir):
        
        
        libList = glob.glob(os.path.join(moduleDir, "*.so"))
        if libList:
            libName = os.path.basename(libList[0])
            moduleName = libName.split('.')[0]
            
            moduleDirName = os.path.basename(moduleDir)
            module = import_module("build." + moduleDirName + "." + moduleName)
            return getattr(module, "autofunc_c")
        else:
            raise ValueError("Could not find binaries at " + moduleDir +
                             ". Delete the build directory or run the code with recompile=True")

    else:
        if moduleDir:
            
            try:
                os.makedirs(moduleDir)
            except OSError as e:
                if e.errno != errno.EEXIST:
                    raise

        if complexResult and compileComplex:
            code_gen = complexCodeGen  
        else:
            code_gen = None  

        if expression is None:
            raise ValueError("Expression for autowrap is None but no binaries are found. Delete the build directory and try to run the code again.")

        if expressionIndices is not None:  
            
            
            for i in range(len(expressionIndices)):
                expression = expression.args[expressionIndices[i]]

        
        return autowrap(expression, backend=backend, tempdir=moduleDir, args=args, verbose=verbose, language=language,
                        code_gen=code_gen)


def getModuleDir(phaseAndVariable, minMax=-1, expressionNumber=-1):

    if storeBinaries:
        if minMax == 0:
            minMaxStr = "_min"
        else:
            if minMax == 1:
                minMaxStr = "_max"
            else:
                minMaxStr = ""

        if expressionNumber == -1:
            expressionStr = ""
        else:
            expressionStr = "_" + str(expressionNumber)

        moduleDirName = phaseAndVariable + minMaxStr + expressionStr
        moduleDir = os.path.join(buildDir, moduleDirName)

        return moduleDir

    else:
        return None

def velocityReducedAcceleration(minMax, j_min_in, a_0_in, a_n_plus_1_star_in, v_0_in, v_max_in, tS_in, t_n_in):
    

    global a_1_velocityReducedAcceleration

    if not compileCode or not a_1_velocityReducedAcceleration:
        j_min, a_0, a_n_plus_1_star, v_0, v_max, tS, t_n = symbols('j_min a_0 a_n_plus_1_star v_0 v_max tS t_n')

    if not compileCode or not a_1_velocityReducedAcceleration and loadExpressions:

        a_1_star_a = -(a_0 * tS + a_n_plus_1_star * tS - 2 * a_n_plus_1_star * t_n - 3 * j_min * tS * t_n
                       + 3 * j_min * t_n ** 2 + 2 * v_0 - 2 * v_max)
        a_1_star_b = sqrt(a_0 ** 2 * tS ** 2 + 2 * a_0 * a_n_plus_1_star * tS ** 2 +
                             4 * a_0 * a_n_plus_1_star * tS * t_n + 2 * a_0 * j_min * tS ** 2 * t_n -
                             2 * a_0 * j_min * tS * t_n ** 2 + 4 * a_0 * tS * v_0 - 4 * a_0 * tS * v_max +
                             a_n_plus_1_star ** 2 * tS ** 2 - 4 * a_n_plus_1_star ** 2 * tS * t_n +
                             4 * a_n_plus_1_star ** 2 * t_n ** 2 + 2 * a_n_plus_1_star * j_min * tS ** 2 * t_n
                             + 2 * a_n_plus_1_star * j_min * tS * t_n ** 2 - 4 * a_n_plus_1_star * j_min * t_n ** 3
                             + 4 * a_n_plus_1_star * tS * v_0 - 4 * a_n_plus_1_star * tS * v_max +
                             8 * a_n_plus_1_star * t_n * v_0 - 8 * a_n_plus_1_star * t_n * v_max +
                             j_min ** 2 * tS ** 2 * t_n ** 2 - 2 * j_min ** 2 * tS * t_n ** 3 +
                             j_min ** 2 * t_n ** 4 + 4 * j_min * tS * t_n * v_0 - 4 * j_min * tS * t_n * v_max -
                             4 * j_min * t_n ** 2 * v_0 + 4 * j_min * t_n ** 2 * v_max + 4 * v_0 ** 2 -
                             8 * v_0 * v_max + 4 * v_max ** 2)


        a_1_expr_min = (a_1_star_a - a_1_star_b) / (4*t_n)
        a_1_expr_max = (a_1_star_a + a_1_star_b) / (4*t_n)
    else:
        a_1_expr_min = None
        a_1_expr_max = None

    if compileCode:
        if not a_1_velocityReducedAcceleration:
            a_1_velocityReducedAcceleration.append(
                compileOrRestoreExpression(a_1_expr_min, args=[j_min, a_0, a_n_plus_1_star, v_0, v_max, tS, t_n],
                                           phaseAndVariable="vel_reduced_a1", minMax=0, expressionNumber=-1))

            a_1_velocityReducedAcceleration.append(
                compileOrRestoreExpression(a_1_expr_max, args=[j_min, a_0, a_n_plus_1_star, v_0, v_max, tS, t_n],
                                           phaseAndVariable="vel_reduced_a1", minMax=1, expressionNumber=-1))


        a_1_out = a_1_velocityReducedAcceleration[minMax](j_min_in, a_0_in, a_n_plus_1_star_in, v_0_in, v_max_in,
                                                           tS_in, t_n_in)

    else:
        if minMax == 0:
            a_1_out = a_1_expr_min.evalf(subs={j_min: j_min_in, a_0: a_0_in, a_n_plus_1_star: a_n_plus_1_star_in,
                                               v_0: v_0_in, v_max: v_max_in, tS: tS_in, t_n: t_n_in})
        else:
            a_1_out = a_1_expr_max.evalf(subs={j_min: j_min_in, a_0: a_0_in, a_n_plus_1_star: a_n_plus_1_star_in,
                                               v_0: v_0_in, v_max: v_max_in, tS: tS_in, t_n: t_n_in})

    return a_1_out


def positionBorderCaseMinJerkPhase(j_min_in, a_0_in, v_0_in, p_0_in, p_max_in, tS_in):

    global t_v0_positionBorderCaseMinJerkPhase
    global a_1_positionBorderCaseMinJerkPhase
    global loadExpressions

    if not compileCode or not t_v0_positionBorderCaseMinJerkPhase or not a_1_positionBorderCaseMinJerkPhase and loadExpressions:
        a_0, a_1, v_0, j_min, p_0, p_max, tS, t_v0, t = symbols('a_0 a_1 v_0 j_min p_0 p_max tS t_v0 t')

    if not compileCode or not t_v0_positionBorderCaseMinJerkPhase and loadExpressions:
        t_v0_expr = Complement(FiniteSet(Piecewise((tS/2 - sqrt(tS**2 - 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2 - sqrt(2*tS**2 + (-4*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + 2*(2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)/sqrt(tS**2 - 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min)) + 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 4*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2, Eq(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min, 0)), (tS/2 - sqrt(tS**2 - 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) + 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2 - sqrt(2*tS**2 + (-4*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + 2*(2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)/sqrt(tS**2 - 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) + 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min)) + 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) - 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 4*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2, True)), Piecewise((tS/2 - sqrt(tS**2 - 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2 + sqrt(2*tS**2 + (-4*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + 2*(2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)/sqrt(tS**2 - 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min)) + 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 4*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2, Eq(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min, 0)), (tS/2 - sqrt(tS**2 - 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) + 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2 + sqrt(2*tS**2 + (-4*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + 2*(2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)/sqrt(tS**2 - 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) + 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min)) + 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) - 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 4*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2, True)), Piecewise((tS/2 + sqrt(tS**2 - 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2 - sqrt(2*tS**2 - (-4*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + 2*(2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)/sqrt(tS**2 - 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min)) + 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 4*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2, Eq(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min, 0)), (tS/2 + sqrt(tS**2 - 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) + 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2 - sqrt(2*tS**2 - (-4*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + 2*(2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)/sqrt(tS**2 - 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) + 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min)) + 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) - 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 4*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2, True)), Piecewise((tS/2 + sqrt(tS**2 - 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2 + sqrt(2*tS**2 - (-4*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + 2*(2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)/sqrt(tS**2 - 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min)) + 2*(-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**(1/3) - 4*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2, Eq(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min, 0)), (tS/2 + sqrt(tS**2 - 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) + 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2 + sqrt(2*tS**2 - (-4*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + 2*(2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)/sqrt(tS**2 - 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) + 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 2*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min)) + 2*(-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/(3*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3)) - 2*((-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/216 - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/6 + (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/16 + sqrt((-2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) - (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**2/12 - (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)**3/27 + (-(-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)**3/108 + (-3*tS**2/2 + (-3*a_0*tS + j_min*tS**2 - 6*v_0)/j_min)*(2*tS*(-2*tS*(3*tS**2/64 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(16*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/(4*j_min)) + (6*p_0*tS - 6*p_max*tS + 2*tS**2*v_0)/j_min)/3 - (-2*tS*(tS**2/2 - (-3*a_0*tS + j_min*tS**2 - 6*v_0)/(2*j_min)) + (2*a_0*tS**2 - 12*p_0 + 12*p_max)/j_min)**2/8)**2/4))**(1/3) - 4*(-3*a_0*tS + j_min*tS**2 - 6*v_0)/(3*j_min))/2, True))), FiniteSet(tS/2))
        
        numSolution = 3  
        t_v0_expr = t_v0_expr.args[0].args[numSolution]
        
        
    else:
        t_v0_expr = None

    if not compileCode or not a_1_positionBorderCaseMinJerkPhase and loadExpressions:
        a_1_expr = (a_0 * tS + j_min * tS ** 2 - 2 * j_min * tS * t_v0 + j_min * t_v0 ** 2 + 2 * v_0) / (tS - 2 * t_v0)
    else:
        a_1_expr = None

    if compileCode:
        if not a_1_positionBorderCaseMinJerkPhase:
            a_1_positionBorderCaseMinJerkPhase = compileOrRestoreExpression(a_1_expr, args=[j_min, a_0, v_0, tS, t_v0],
                                                                            phaseAndVariable="pos_minJerk_a1",
                                                                            minMax=-1, expressionNumber=-1)
        if not t_v0_positionBorderCaseMinJerkPhase:
            
            
            t_v0_positionBorderCaseMinJerkPhase.append(compileOrRestoreExpression(t_v0_expr,
                                                                                  args=
                                                                                  [j_min, a_0, v_0, p_0, p_max, tS],
                                                                                  phaseAndVariable="pos_minJerk_tv0",
                                                                                  expressionIndices=[0, 1, 0],
                                                                                  minMax=-1, expressionNumber=0))
            
            
            t_v0_positionBorderCaseMinJerkPhase.append(
                compileOrRestoreExpression(t_v0_expr,
                                           args=[j_min, a_0, v_0, p_0, p_max, tS],
                                           phaseAndVariable="pos_minJerk_tv0",
                                           expressionIndices=[0, 0],
                                           minMax=-1, expressionNumber=1))
            
            
            t_v0_positionBorderCaseMinJerkPhase.append(
                compileOrRestoreExpression(t_v0_expr,
                                           args=[j_min, a_0, v_0, p_0, p_max, tS],
                                           phaseAndVariable="pos_minJerk_tv0",
                                           expressionIndices=[1, 0],
                                           minMax=-1, expressionNumber=2, complexResult=True))

            if not compileComplex:
                
                t_v0_positionBorderCaseMinJerkPhase.append(lambdify((j_min, a_0, v_0, p_0, p_max, tS),
                                                                    t_v0_expr.args[1].args[0], 'numpy'))
            else:
                t_v0_positionBorderCaseMinJerkPhase.append(None)



        
        
        

        if t_v0_positionBorderCaseMinJerkPhase[0](j_min_in, a_0_in, v_0_in, p_0_in, p_max_in, tS_in) == 0:
            t_v0_out = t_v0_positionBorderCaseMinJerkPhase[1](j_min_in, a_0_in, v_0_in, p_0_in, p_max_in, tS_in)
        else:
            t_v0_out = t_v0_positionBorderCaseMinJerkPhase[2](j_min_in, a_0_in, v_0_in, p_0_in, p_max_in, tS_in)

        

        if np.isnan(t_v0_out) and not compileComplex:
            
            print("Min Jerk: Lambdify fallback")
            t_v0_out = t_v0_positionBorderCaseMinJerkPhase[3](j_min_in + 0j, a_0_in + 0j, v_0_in + 0j, p_0_in + 0j,
                                                              p_max_in + 0j, tS_in + 0j)
            

        if np.abs(np.imag(t_v0_out)) < 1e-5:
            t_v0_out = np.real(t_v0_out)
        else:
            t_v0_out = float('nan')
            

        a_1_out = a_1_positionBorderCaseMinJerkPhase(j_min_in, a_0_in, v_0_in, tS_in, t_v0_out)

    else:
        
        t_v0_out = t_v0_expr.subs({j_min: j_min_in, a_0: a_0_in, v_0: v_0_in, p_0: p_0_in, p_max: p_max_in, tS: tS_in}).evalf()

        if t_v0_out.is_real or abs(im(t_v0_out)) < 1e-5:
            t_v0_out = re(t_v0_out)

        
        a_1_out = a_1_expr.evalf(subs={j_min: j_min_in, a_0: a_0_in, v_0: v_0_in, tS: tS_in, t_v0: t_v0_out})


    return a_1_out, t_v0_out

def positionBorderCaseFirstPhase(minMax, a_0_in, v_0_in, p_0_in, p_max_in, tS_in):
    
    
    

    global t_v0_positionBorderCaseFirstPhase
    global a_1_positionBorderCaseFirstPhase

    if not compileCode or not t_v0_positionBorderCaseFirstPhase[minMax] or not a_1_positionBorderCaseFirstPhase:
        a_0, a_1, a_min, v_0, p_0, p_max, tS, t_v0, t =            symbols('a_0 a_1 a_min v_0 p_0 p_max tS t_v0 t')

    if not compileCode or not t_v0_positionBorderCaseFirstPhase[minMax] and loadExpressions:
        sqrt_2 = np.sqrt(2)
        t_v0_expr = FiniteSet(-2*v_0/a_0 + sqrt_2*sqrt(-3*a_0*p_0 + 3*a_0*p_max + 2*v_0**2)/a_0, -2*v_0/a_0 - sqrt_2*sqrt(-3*a_0*p_0 + 3*a_0*p_max + 2*v_0**2)/a_0)
        numSolution = minMax  
        
        t_v0_expr = t_v0_expr.args[numSolution]

    else:
        t_v0_expr = None


    if not compileCode or not a_1_positionBorderCaseFirstPhase and loadExpressions:
        a_1_expr = a_0 - 2*tS*(a_0*t_v0 + v_0)/t_v0**2
    else:
        a_1_expr = None

    if compileCode:
        if not a_1_positionBorderCaseFirstPhase:
            a_1_positionBorderCaseFirstPhase = compileOrRestoreExpression(a_1_expr,
                                                                          args=[a_0, v_0, tS, t_v0],
                                                                          phaseAndVariable="pos_first_a1",
                                                                          minMax=-1, expressionNumber=-1)
        if not t_v0_positionBorderCaseFirstPhase[minMax]:
            t_v0_positionBorderCaseFirstPhase[minMax] = compileOrRestoreExpression(t_v0_expr,
                                                                          args=[a_0, v_0, p_0, p_max],
                                                                          phaseAndVariable="pos_first_tv0",
                                                                          minMax=minMax, expressionNumber=-1)

        t_v0_out = t_v0_positionBorderCaseFirstPhase[minMax](a_0_in, v_0_in, p_0_in, p_max_in)
        a_1_out = a_1_positionBorderCaseFirstPhase(a_0_in, v_0_in, tS_in, t_v0_out)

    else:
        if a_0_in != 0:
            t_v0_out = t_v0_expr.evalf(subs={a_0: a_0_in, v_0: v_0_in, p_0: p_0_in, p_max: p_max_in})
        else:
            t_v0_out = float('nan')
        a_1_out = a_1_expr.evalf(subs={a_0: a_0_in, v_0: v_0_in, tS: tS_in, t_v0: t_v0_out})

    
    

    return a_1_out, t_v0_out


def positionBorderCaseUpperBound(minMax, j_min_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in):

    global t_v0_positionBorderCaseUpperBound
    global a_1_positionBorderCaseUpperBound
    global language
    global backend

    a_sum = a_min_in + a_0_in

    if not compileCode or not t_v0_positionBorderCaseUpperBound or not a_1_positionBorderCaseUpperBound[minMax]:
        a_0, a_1, a_min, v_0, j_min, p_0, p_max, tS, t_v0, t =            symbols('a_0 a_1 a_min v_0 j_min p_0 p_max tS t_v0 t')

    if not compileCode or not t_v0_positionBorderCaseUpperBound and loadExpressions:
        t_v0_expr = -(2*a_0*tS - 2*a_min*(tS - (a_1 - a_min)/j_min) - j_min*tS**2 + j_min*(tS - (a_1 - a_min)/j_min)**2 - tS*(a_0 - a_1) - 2*tS*(a_1 - j_min*tS) + 2*v_0 + 2*(a_1 - j_min*tS)*(tS - (a_1 - a_min)/j_min))/(2*a_min)
    else:
        t_v0_expr = None

    if not compileCode or not a_1_positionBorderCaseUpperBound[minMax] and loadExpressions:
        a_1_expr_array = FiniteSet(Piecewise((2*a_min/3 + j_min*tS/2 - sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 - 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3))/2 - sqrt(8*a_0*j_min*tS/3 - 8*a_min**2/3 - 16*a_min*j_min*tS/3 - 4*j_min**2*tS**2/3 + 16*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/2 + 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3) + (8*a_0*a_min*j_min*tS + 4*a_0*j_min**2*tS**2 - 4*a_min**2*j_min*tS - 8*a_min*j_min**2*tS**2/3 + 16*a_min*j_min*v_0 + 8*j_min**2*tS*v_0 + 2*(-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))/sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 - 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3)))/2, Eq(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12, 0)), (2*a_min/3 + j_min*tS/2 - sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 + 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) - 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3)))/2 - sqrt(8*a_0*j_min*tS/3 - 8*a_min**2/3 - 16*a_min*j_min*tS/3 - 4*j_min**2*tS**2/3 + 16*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/2 - 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) + (8*a_0*a_min*j_min*tS + 4*a_0*j_min**2*tS**2 - 4*a_min**2*j_min*tS - 8*a_min*j_min**2*tS**2/3 + 16*a_min*j_min*v_0 + 8*j_min**2*tS*v_0 + 2*(-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))/sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 + 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) - 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3))) + 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3)))/2, True)), Piecewise((2*a_min/3 + j_min*tS/2 - sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 - 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3))/2 + sqrt(8*a_0*j_min*tS/3 - 8*a_min**2/3 - 16*a_min*j_min*tS/3 - 4*j_min**2*tS**2/3 + 16*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/2 + 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3) + (8*a_0*a_min*j_min*tS + 4*a_0*j_min**2*tS**2 - 4*a_min**2*j_min*tS - 8*a_min*j_min**2*tS**2/3 + 16*a_min*j_min*v_0 + 8*j_min**2*tS*v_0 + 2*(-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))/sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 - 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3)))/2, Eq(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12, 0)), (2*a_min/3 + j_min*tS/2 - sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 + 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) - 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3)))/2 + sqrt(8*a_0*j_min*tS/3 - 8*a_min**2/3 - 16*a_min*j_min*tS/3 - 4*j_min**2*tS**2/3 + 16*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/2 - 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) + (8*a_0*a_min*j_min*tS + 4*a_0*j_min**2*tS**2 - 4*a_min**2*j_min*tS - 8*a_min*j_min**2*tS**2/3 + 16*a_min*j_min*v_0 + 8*j_min**2*tS*v_0 + 2*(-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))/sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 + 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) - 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3))) + 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3)))/2, True)), Piecewise((2*a_min/3 + j_min*tS/2 + sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 - 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3))/2 - sqrt(8*a_0*j_min*tS/3 - 8*a_min**2/3 - 16*a_min*j_min*tS/3 - 4*j_min**2*tS**2/3 + 16*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/2 + 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3) - (8*a_0*a_min*j_min*tS + 4*a_0*j_min**2*tS**2 - 4*a_min**2*j_min*tS - 8*a_min*j_min**2*tS**2/3 + 16*a_min*j_min*v_0 + 8*j_min**2*tS*v_0 + 2*(-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))/sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 - 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3)))/2, Eq(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12, 0)), (2*a_min/3 + j_min*tS/2 + sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 + 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) - 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3)))/2 - sqrt(8*a_0*j_min*tS/3 - 8*a_min**2/3 - 16*a_min*j_min*tS/3 - 4*j_min**2*tS**2/3 + 16*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/2 - 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) - (8*a_0*a_min*j_min*tS + 4*a_0*j_min**2*tS**2 - 4*a_min**2*j_min*tS - 8*a_min*j_min**2*tS**2/3 + 16*a_min*j_min*v_0 + 8*j_min**2*tS*v_0 + 2*(-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))/sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 + 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) - 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3))) + 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3)))/2, True)), Piecewise((2*a_min/3 + j_min*tS/2 + sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 - 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3))/2 + sqrt(8*a_0*j_min*tS/3 - 8*a_min**2/3 - 16*a_min*j_min*tS/3 - 4*j_min**2*tS**2/3 + 16*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/2 + 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3) - (8*a_0*a_min*j_min*tS + 4*a_0*j_min**2*tS**2 - 4*a_min**2*j_min*tS - 8*a_min*j_min**2*tS**2/3 + 16*a_min*j_min*v_0 + 8*j_min**2*tS*v_0 + 2*(-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))/sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 - 2*(-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**(1/3)))/2, Eq(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12, 0)), (2*a_min/3 + j_min*tS/2 + sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 + 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) - 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3)))/2 + sqrt(8*a_0*j_min*tS/3 - 8*a_min**2/3 - 16*a_min*j_min*tS/3 - 4*j_min**2*tS**2/3 + 16*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/2 - 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) - (8*a_0*a_min*j_min*tS + 4*a_0*j_min**2*tS**2 - 4*a_min**2*j_min*tS - 8*a_min*j_min**2*tS**2/3 + 16*a_min*j_min*v_0 + 8*j_min**2*tS*v_0 + 2*(-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))/sqrt(4*a_0*j_min*tS/3 - 4*a_min**2/3 - 8*a_min*j_min*tS/3 - 2*j_min**2*tS**2/3 + 8*j_min*v_0/3 + (-8*a_min/3 - 2*j_min*tS)**2/4 + 2*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3) - 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3))) + 2*(-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)/(3*(sqrt((-(-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/108 + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/3 - (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/8)**2/4 + (-a_0**2*j_min**2*tS**2 + 2*a_0*a_min**2*j_min*tS + 8*a_0*a_min*j_min**2*tS**2/3 - 4*a_0*j_min**2*tS*v_0 + a_min**4/3 + 4*a_min**2*j_min*v_0 + 8*a_min*j_min**2*p_0 - 8*a_min*j_min**2*p_max + 8*a_min*j_min**2*tS*v_0 - 4*j_min**2*v_0**2 + (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)) - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**2/12)**3/27) + (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)**3/216 - (-2*a_0*j_min*tS + 2*a_min**2 + 4*a_min*j_min*tS + j_min**2*tS**2 - 4*j_min*v_0 - 3*(-8*a_min/3 - 2*j_min*tS)**2/8)*(a_0**2*j_min**2*tS**2 - 2*a_0*a_min**2*j_min*tS - 8*a_0*a_min*j_min**2*tS**2/3 + 4*a_0*j_min**2*tS*v_0 - a_min**4/3 - 4*a_min**2*j_min*v_0 - 8*a_min*j_min**2*p_0 + 8*a_min*j_min**2*p_max - 8*a_min*j_min**2*tS*v_0 + 4*j_min**2*v_0**2 - (-8*a_min/3 - 2*j_min*tS)*(a_0*a_min*j_min*tS + a_0*j_min**2*tS**2/2 - a_min**2*j_min*tS/2 - a_min*j_min**2*tS**2/3 + 2*a_min*j_min*v_0 + j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS/8 - a_min**2/8 - a_min*j_min*tS/4 - j_min**2*tS**2/16 + j_min*v_0/4 + 3*(-8*a_min/3 - 2*j_min*tS)**2/256)))/6 + (4*a_0*a_min*j_min*tS + 2*a_0*j_min**2*tS**2 - 2*a_min**2*j_min*tS - 4*a_min*j_min**2*tS**2/3 + 8*a_min*j_min*v_0 + 4*j_min**2*tS*v_0 + (-8*a_min/3 - 2*j_min*tS)*(a_0*j_min*tS - a_min**2 - 2*a_min*j_min*tS - j_min**2*tS**2/2 + 2*j_min*v_0 + (-8*a_min/3 - 2*j_min*tS)**2/8))**2/16)**(1/3)))/2, True)))
        
    else:
        a_1_expr_array = None

    if minMax == 0:
        
        numSolution = [0, 2]  
    else:
        
        numSolution = [3, 1]  

    if compileCode:
        if not a_1_positionBorderCaseUpperBound[minMax]:
            for i in range(len(numSolution)):

                a_1_positionBorderCaseUpperBound[minMax].append(
                    compileOrRestoreExpression(a_1_expr_array,
                                               args=[j_min, a_0, a_min, v_0, p_0, p_max, tS],
                                               phaseAndVariable="pos_upperBound_a1",
                                               expressionIndices=[numSolution[i], 0, 1, 0],
                                               minMax=minMax, expressionNumber=0 + i * 4))

                
                a_1_positionBorderCaseUpperBound[minMax].append(
                    compileOrRestoreExpression(a_1_expr_array,
                                               args=[j_min, a_0, a_min, v_0, p_0, p_max, tS],
                                               phaseAndVariable="pos_upperBound_a1",
                                               expressionIndices=[numSolution[i], 0, 0],
                                               minMax=minMax, expressionNumber=1 + i * 4))
                
                
                a_1_positionBorderCaseUpperBound[minMax].append(
                    compileOrRestoreExpression(a_1_expr_array,
                                               args=[j_min, a_0, a_min, v_0, p_0, p_max, tS],
                                               phaseAndVariable="pos_upperBound_a1",
                                               expressionIndices=[numSolution[i], 1, 0],
                                               minMax=minMax, expressionNumber=2 + i * 4, complexResult=True))

                if not compileComplex:
                    a_1_expr = a_1_expr_array.args[numSolution[i]]
                    
                    a_1_positionBorderCaseUpperBound[minMax].append(lambdify((j_min, a_0, a_min, v_0, p_0, p_max, tS),
                                                                             a_1_expr.args[1].args[0], 'numpy'))
                else:
                    a_1_positionBorderCaseUpperBound[minMax].append(None)

        for i in range(len(numSolution)):
            a_1_positionBorderCaseUpperBoundCondition = a_1_positionBorderCaseUpperBound[minMax][0 + i * 4](j_min_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in)
            
            if a_1_positionBorderCaseUpperBoundCondition == 0:
                
                a_1_out = a_1_positionBorderCaseUpperBound[minMax][1 + i * 4](j_min_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in)

            else:
                
                a_1_out = a_1_positionBorderCaseUpperBound[minMax][2 + i * 4](j_min_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in)

            if not compileComplex and not np.isnan(a_1_out):
                break

            if compileComplex and np.abs(np.imag(a_1_out)) < 1e-3:
                a_1_out = np.real(a_1_out)
                break


        if np.isnan(a_1_out) or np.imag(a_1_out) != 0:

            if not compileComplex:

                for i in range(len(numSolution)):
                    a_1_out = a_1_positionBorderCaseUpperBound[minMax][3 + i * 4](j_min_in + 0j, a_0_in + 0j, a_min_in + 0j, v_0_in + 0j, p_0_in + 0j, p_max_in + 0j, tS_in + 0j)
                    print(a_1_out)
                    if np.abs(np.imag(a_1_out)) < 1e-3:
                        a_1_out = np.real(a_1_out)
                        break

            if np.imag(a_1_out) != 0:
                a_1_out = float('nan')

                if minMax == 0:
                    a_min_in = a_min_in - 0.02
                else:
                    a_min_in = a_min_in + 0.02
                
                for i in range(len(numSolution)):
                    if compileComplex:
                        a_1_out = a_1_positionBorderCaseUpperBound[minMax][2 + i * 4](j_min_in, a_0_in, a_min_in,
                                                                                      v_0_in, p_0_in, p_max_in, tS_in)
                    else:
                        a_1_out = a_1_positionBorderCaseUpperBound[minMax][3 + i * 4](j_min_in + 0j, a_0_in + 0j,
                                                                                      a_min_in + 0j, v_0_in + 0j,
                                                                                      p_0_in + 0j, p_max_in + 0j,
                                                                                      tS_in + 0j)
                    
                    if np.abs(np.imag(a_1_out)) < 1e-3:
                        a_1_out = np.real(a_1_out)
                        break
                if np.imag(a_1_out) != 0:
                    a_1_out = float('nan')

        if not t_v0_positionBorderCaseUpperBound:
            t_v0_positionBorderCaseUpperBound = compileOrRestoreExpression(t_v0_expr,
                                                                           args=[j_min, a_0, a_1, a_min, v_0, tS],
                                                                           phaseAndVariable="pos_upperBound_tv0",
                                                                           minMax=-1, expressionNumber=-1)

        t_v0_out = t_v0_positionBorderCaseUpperBound(j_min_in, a_0_in, a_1_out, a_min_in, v_0_in, tS_in)

    else:
        for i in range(len(numSolution)):
            a_1_out = a_1_expr_array.args[numSolution[i]].subs({j_min: j_min_in, a_0: a_0_in, a_min: a_min_in, v_0: v_0_in, p_0: p_0_in, p_max: p_max_in, tS: tS_in}).evalf()
            print("a_1: " + str(a_1_out))
            if a_1_out.is_real or abs(im(a_1_out)) < 1e-3:
                a_1_out = re(a_1_out)
                break
        t_v0_out = t_v0_expr.evalf(subs={j_min: j_min_in, a_0: a_0_in, a_1: a_1_out, a_min: a_min_in, v_0: v_0_in, tS: tS_in})

    return a_1_out, t_v0_out


def positionBorderCaseAllPhases(minMax, j_min_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in, t_n_a_min_in):

    global a_1_positionBorderCaseAllPhases
    global t_v0_positionBorderCaseAllPhases

    if not compileCode or not a_1_positionBorderCaseAllPhases[minMax] or not t_v0_positionBorderCaseAllPhases:
        a_0, a_1, a_min, v_0, j_min, p_0, p_max, tS, t_n_a_min, t_v0, t = symbols('a_0 a_1 a_min v_0 j_min p_0 p_max tS t_n_a_min t_v0 t')

    if not compileCode or not a_1_positionBorderCaseAllPhases[minMax] and loadExpressions:
        a_1_expr = FiniteSet(-sqrt(3)*sqrt(a_min*(2*a_0*tS**2 + 6*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*t_n_a_min**2 + 2*j_min*tS**2*t_n_a_min - 2*j_min*t_n_a_min**3 + 24*p_0 - 24*p_max + 12*tS*v_0 + 12*t_n_a_min*v_0))/(6*t_n_a_min) - (a_0*tS - a_min*t_n_a_min - j_min*tS*t_n_a_min + j_min*t_n_a_min**2 + 2*v_0)/(2*t_n_a_min), sqrt(3)*sqrt(a_min*(2*a_0*tS**2 + 6*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*t_n_a_min**2 + 2*j_min*tS**2*t_n_a_min - 2*j_min*t_n_a_min**3 + 24*p_0 - 24*p_max + 12*tS*v_0 + 12*t_n_a_min*v_0))/(6*t_n_a_min) - (a_0*tS - a_min*t_n_a_min - j_min*tS*t_n_a_min + j_min*t_n_a_min**2 + 2*v_0)/(2*t_n_a_min))
        numSolution = minMax
        a_1_expr = a_1_expr.args[numSolution]
    else:
        a_1_expr = None

    if not compileCode or not t_v0_positionBorderCaseAllPhases and loadExpressions:
        t_v0_expr = FiniteSet(-(2*a_0*tS - 2*a_min*(tS + t_n_a_min) - j_min*tS**2 + j_min*t_n_a_min**2 - tS*(a_0 - a_1) - 2*tS*(a_1 - j_min*tS) + 2*t_n_a_min*(a_1 - j_min*tS) + 2*v_0 + t_n_a_min**2*(a_1 - a_min - j_min*tS + j_min*t_n_a_min)/tS - 2*t_n_a_min*(a_1*tS + a_1*t_n_a_min - a_min*t_n_a_min - j_min*tS**2 + j_min*t_n_a_min**2)/tS - (tS + t_n_a_min)**2*(a_1 - a_min - j_min*tS + j_min*t_n_a_min)/tS + 2*(tS + t_n_a_min)*(a_1*tS + a_1*t_n_a_min - a_min*t_n_a_min - j_min*tS**2 + j_min*t_n_a_min**2)/tS)/(2*a_min))
        t_v0_expr = t_v0_expr.args[0]  
    else:
        t_v0_expr = None

    if compileCode:
        if not a_1_positionBorderCaseAllPhases[minMax]:
            a_1_positionBorderCaseAllPhases[minMax] = compileOrRestoreExpression(a_1_expr, args=[j_min, a_0, a_min, v_0, p_0, p_max, tS, t_n_a_min],
                                           phaseAndVariable="pos_all_a1", minMax=minMax, expressionNumber=-1)

        a_1_out = a_1_positionBorderCaseAllPhases[minMax](j_min_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in,
                                                  t_n_a_min_in)

        if not t_v0_positionBorderCaseAllPhases:
            t_v0_positionBorderCaseAllPhases = compileOrRestoreExpression(t_v0_expr, args=[j_min, a_0, a_1, a_min, v_0, tS, t_n_a_min],
                                           phaseAndVariable="pos_all_tv0", minMax=-1, expressionNumber=-1)

        t_v0_out = t_v0_positionBorderCaseAllPhases(j_min_in, a_0_in, a_1_out, a_min_in, v_0_in, tS_in, t_n_a_min_in)

    else:
        a_1_out = a_1_expr.evalf(subs={j_min: j_min_in, a_0: a_0_in, a_min: a_min_in, v_0: v_0_in,
                                       p_0: p_0_in, p_max: p_max_in, tS: tS_in, t_n_a_min: t_n_a_min_in})

        t_v0_out = t_v0_expr.evalf(subs={j_min: j_min_in, a_0: a_0_in, a_1: a_1_out, a_min: a_min_in, v_0: v_0_in,
                                         tS: tS_in, t_n_a_min: t_n_a_min_in})

    return a_1_out, t_v0_out


def positionBorderCaseReducedJerkPhase(j_min_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in, t_n_a_min_in):
    
    

    global t_v0_positionBorderCaseReducedJerkPhase
    global a_1_positionBorderCaseReducedJerkPhase

    if not compileCode or not t_v0_positionBorderCaseReducedJerkPhase or not a_1_positionBorderCaseReducedJerkPhase:
        a_0, a_1, a_min, v_0, j_min, p_0, p_max, tS, t_n_a_min, t_v0, t = symbols('a_0 a_1 a_min v_0 j_min p_0 p_max tS t_n_a_min t_v0 t')

    if not compileCode or not t_v0_positionBorderCaseReducedJerkPhase and loadExpressions:
        t_v0_expr_array = Complement(FiniteSet(Piecewise((-sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2))/2 - sqrt((2*(-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + 2*(2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)/sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2)) + 2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 4*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(2*a_min**2))/2 - (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/(4*a_min), Eq(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min, 0)), (-sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) + 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2))/2 - sqrt((2*(-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + 2*(2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)/sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) + 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2)) + 2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) - 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 4*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(2*a_min**2))/2 - (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/(4*a_min), True)), Piecewise((-sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2))/2 + sqrt((2*(-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + 2*(2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)/sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2)) + 2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 4*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(2*a_min**2))/2 - (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/(4*a_min), Eq(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min, 0)), (-sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) + 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2))/2 + sqrt((2*(-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + 2*(2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)/sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) + 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2)) + 2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) - 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 4*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(2*a_min**2))/2 - (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/(4*a_min), True)), Piecewise((sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2))/2 - sqrt(-(2*(-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + 2*(2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)/sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2)) + 2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 4*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(2*a_min**2))/2 - (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/(4*a_min), Eq(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min, 0)), (sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) + 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2))/2 - sqrt(-(2*(-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + 2*(2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)/sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) + 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2)) + 2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) - 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 4*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(2*a_min**2))/2 - (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/(4*a_min), True)), Piecewise((sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2))/2 + sqrt(-(2*(-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + 2*(2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)/sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2)) + 2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**(1/3) - 4*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(2*a_min**2))/2 - (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/(4*a_min), Eq(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min, 0)), (sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) + 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2))/2 + sqrt(-(2*(-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + 2*(2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)/sqrt(-2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) + 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 2*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(4*a_min**2)) + 2*(-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/(3*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3)) - 2*(((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/216 - ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/6 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/16 + sqrt((-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**2/12 + ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min - (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)**3/27 + (-((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))**3/108 + ((-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/a_min - 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(-((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(16*a_min) + 3*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(256*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/(4*a_min))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (-a_0*tS**2*t_n_a_min**2 + a_0*tS*t_n_a_min**3 + a_min*tS**2*t_n_a_min**2 - a_min*tS*t_n_a_min**3 - j_min*tS**3*t_n_a_min**2 + j_min*tS*t_n_a_min**4 + 6*p_0*tS**2 + 6*p_0*t_n_a_min**2 - 6*p_max*tS**2 - 6*p_max*t_n_a_min**2 + 2*tS**3*v_0 + 2*t_n_a_min**3*v_0)/a_min)/3 - ((-(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(8*a_min**2))*(2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/a_min + (2*a_0*tS**3 + 2*a_0*tS**2*t_n_a_min - 2*a_min*tS**2*t_n_a_min + 2*a_min*t_n_a_min**3 + 2*j_min*tS**3*t_n_a_min + 2*j_min*tS**2*t_n_a_min**2 - 2*j_min*tS*t_n_a_min**3 - 2*j_min*t_n_a_min**4 - 12*p_0*tS - 12*p_0*t_n_a_min + 12*p_max*tS + 12*p_max*t_n_a_min)/a_min)**2/8)**2/4))**(1/3) - 4*(-4*a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 3*a_min*t_n_a_min**2 - 4*j_min*tS**2*t_n_a_min + 4*j_min*t_n_a_min**3 + 6*p_0 - 6*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(3*a_min) + (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)**2/(2*a_min**2))/2 - (2*a_0*tS - 2*a_min*tS + 2*j_min*tS*t_n_a_min - 2*j_min*t_n_a_min**2 + 4*v_0)/(4*a_min), True))), FiniteSet(tS + t_n_a_min + sqrt(2)*sqrt(tS*t_n_a_min), tS + t_n_a_min - sqrt(2)*sqrt(tS*t_n_a_min)))
        
    else:
        t_v0_expr_array = None

    numSolution = [1, 3]  

    if not compileCode or not a_1_positionBorderCaseReducedJerkPhase and loadExpressions:
        a_1_expr = (a_0 * tS ** 2 + a_min * t_n_a_min ** 2 - 2 * a_min * t_n_a_min * t_v0 + a_min * t_v0 ** 2 + j_min * tS ** 3 - 2 * j_min * tS ** 2 * t_v0 + j_min * tS * t_v0 ** 2 - j_min * t_n_a_min ** 3 + 2 * j_min * t_n_a_min ** 2 * t_v0 - j_min * t_n_a_min * t_v0 ** 2 + 2 * tS * v_0) / (
                              tS ** 2 - 2 * tS * t_v0 + t_n_a_min ** 2 - 2 * t_n_a_min * t_v0 + t_v0 ** 2)
    else:
        a_1_expr = None

    if compileCode:
        if not a_1_positionBorderCaseReducedJerkPhase:
            a_1_positionBorderCaseReducedJerkPhase = compileOrRestoreExpression(a_1_expr, args=[j_min, a_0, a_min, v_0, tS, t_v0, t_n_a_min],
                                           phaseAndVariable="pos_reducedJerk_a1", minMax=-1, expressionNumber=-1)

        if not t_v0_positionBorderCaseReducedJerkPhase:
            for i in range(len(numSolution)):

                t_v0_positionBorderCaseReducedJerkPhase.append(
                    compileOrRestoreExpression(t_v0_expr_array,
                                               args=[j_min, a_0, a_min, v_0, p_0, p_max, tS, t_n_a_min],
                                               phaseAndVariable="pos_reducedJerk_tv0",
                                               expressionIndices=[0, numSolution[i], 0, 1, 0],
                                               minMax=-1,
                                               expressionNumber=0 + i * 4))

                
                t_v0_positionBorderCaseReducedJerkPhase.append(
                    compileOrRestoreExpression(t_v0_expr_array,
                                               args=[j_min, a_0, a_min, v_0, p_0, p_max, tS, t_n_a_min],
                                               phaseAndVariable="pos_reducedJerk_tv0",
                                               expressionIndices=[0, numSolution[i], 0, 0],
                                               minMax=-1,
                                               expressionNumber=1 + i * 4))

                

                t_v0_positionBorderCaseReducedJerkPhase.append(
                    compileOrRestoreExpression(t_v0_expr_array,
                                               args=[j_min, a_0, a_min, v_0, p_0, p_max, tS, t_n_a_min],
                                               phaseAndVariable="pos_reducedJerk_tv0",
                                               expressionIndices=[0, numSolution[i], 1, 0],
                                               minMax=-1,
                                               expressionNumber=2 + i * 4,  complexResult=True))

                if not compileComplex:
                    
                    t_v0_expr = t_v0_expr_array.args[0].args[numSolution[i]]
                    t_v0_positionBorderCaseReducedJerkPhase.append(lambdify((j_min, a_0, a_min, v_0, p_0, p_max, tS, t_n_a_min),
                                                                             t_v0_expr.args[1].args[0], 'numpy'))
                else:
                    t_v0_positionBorderCaseReducedJerkPhase.append(None)

        for i in range(len(numSolution)):
            if t_v0_positionBorderCaseReducedJerkPhase[0 + i * 4](j_min_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in,
                                                          t_n_a_min_in) == 0:
                t_v0_out = t_v0_positionBorderCaseReducedJerkPhase[1 + i * 4](j_min_in, a_0_in, a_min_in, v_0_in, p_0_in,
                                                                      p_max_in, tS_in, t_n_a_min_in)
            else:
                t_v0_out = t_v0_positionBorderCaseReducedJerkPhase[2 + i * 4](j_min_in, a_0_in, a_min_in, v_0_in, p_0_in,
                                                                      p_max_in, tS_in, t_n_a_min_in)

            if not compileComplex and not np.isnan(t_v0_out) and t_v0_out >= t_n_a_min_in:
                break

            if compileComplex and np.abs(np.imag(t_v0_out)) < 1e-5 and np.real(t_v0_out) >= t_n_a_min_in:
                t_v0_out = np.real(t_v0_out)
                break

        if not compileComplex and np.isnan(t_v0_out):

            for i in range(len(numSolution)):
                t_v0_out = t_v0_positionBorderCaseReducedJerkPhase[3 + i * 4](j_min_in + 0j, a_0_in + 0j, a_min_in + 0j,
                                                                              v_0_in + 0j, p_0_in + 0j, p_max_in + 0j, tS_in + 0j, t_n_a_min_in + 0j)
                
                if np.abs(np.imag(t_v0_out)) < 1e-5 and np.real(t_v0_out) >= t_n_a_min_in:
                    t_v0_out = np.real(t_v0_out)
                    break

        if np.imag(t_v0_out) != 0:
            t_v0_out = float('nan')

        a_1_out = a_1_positionBorderCaseReducedJerkPhase(j_min_in, a_0_in, a_min_in, v_0_in, tS_in, t_v0_out, t_n_a_min_in)

    else:
        for i in range(len(numSolution)):
            t_v0_out = t_v0_expr_array.args[0].args[numSolution[i]].subs(
                {j_min: j_min_in, a_0: a_0_in, a_min: a_min_in, v_0: v_0_in, p_0: p_0_in, p_max: p_max_in, tS: tS_in,
                 t_n_a_min: t_n_a_min_in}).evalf()

            if (t_v0_out.is_real or abs(im(t_v0_out)) < 1e-5) and re(t_v0_out) >= t_n_a_min_in:
                
                t_v0_out = re(t_v0_out)
                break

        a_1_out = a_1_expr.evalf(subs={j_min: j_min_in, a_0: a_0_in, a_min: a_min_in, v_0: v_0_in, tS: tS_in, t_v0: t_v0_out, t_n_a_min: t_n_a_min_in})

    return a_1_out, t_v0_out



def positionBoundedVelocityContinuousAllPhases(j_min_in, j_max_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in,
                                               t_star_in, t_n_a_min_in):

    global t_u_positionBoundedVelocityContinuousAllPhases
    global a_1_positionBoundedVelocityContinuousAllPhases

    compute_a_1 = True  

    if not compileCode or not t_u_positionBoundedVelocityContinuousAllPhases or not a_1_positionBoundedVelocityContinuousAllPhases:
        a_0, a_1, a_min, v_0, j_min, j_max, p_0, p_max, tS, t_n_a_min, t_u, t_star, t = symbols('a_0 a_1 a_min v_0 j_min j_max p_0 p_max tS t_n_a_min t_u t_star t')

    if not compileCode or not t_u_positionBoundedVelocityContinuousAllPhases and loadExpressions:
        t_u_expr = FiniteSet(tS/2 + t_n_a_min/2 - (-9*tS*t_star - 9*t_n_a_min*t_star + 9*t_star**2 + (-3*tS/2 - 3*t_n_a_min/2)**2)/(3*(-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2)/2 + (-3*tS/2 - 3*t_n_a_min/2)**3 + sqrt((-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2) + 2*(-3*tS/2 - 3*t_n_a_min/2)**3 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*j_max))**2 - 4*(-9*tS*t_star - 9*t_n_a_min*t_star + 9*t_star**2 + (-3*tS/2 - 3*t_n_a_min/2)**2)**3)/2 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(4*j_max))**(1/3)) - (-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2)/2 + (-3*tS/2 - 3*t_n_a_min/2)**3 + sqrt((-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2) + 2*(-3*tS/2 - 3*t_n_a_min/2)**3 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*j_max))**2 - 4*(-9*tS*t_star - 9*t_n_a_min*t_star + 9*t_star**2 + (-3*tS/2 - 3*t_n_a_min/2)**2)**3)/2 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(4*j_max))**(1/3)/3, tS/2 + t_n_a_min/2 - (-9*tS*t_star - 9*t_n_a_min*t_star + 9*t_star**2 + (-3*tS/2 - 3*t_n_a_min/2)**2)/(3*(-1/2 - sqrt(3)*I/2)*(-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2)/2 + (-3*tS/2 - 3*t_n_a_min/2)**3 + sqrt((-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2) + 2*(-3*tS/2 - 3*t_n_a_min/2)**3 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*j_max))**2 - 4*(-9*tS*t_star - 9*t_n_a_min*t_star + 9*t_star**2 + (-3*tS/2 - 3*t_n_a_min/2)**2)**3)/2 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(4*j_max))**(1/3)) - (-1/2 - sqrt(3)*I/2)*(-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2)/2 + (-3*tS/2 - 3*t_n_a_min/2)**3 + sqrt((-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2) + 2*(-3*tS/2 - 3*t_n_a_min/2)**3 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*j_max))**2 - 4*(-9*tS*t_star - 9*t_n_a_min*t_star + 9*t_star**2 + (-3*tS/2 - 3*t_n_a_min/2)**2)**3)/2 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(4*j_max))**(1/3)/3, tS/2 + t_n_a_min/2 - (-9*tS*t_star - 9*t_n_a_min*t_star + 9*t_star**2 + (-3*tS/2 - 3*t_n_a_min/2)**2)/(3*(-1/2 + sqrt(3)*I/2)*(-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2)/2 + (-3*tS/2 - 3*t_n_a_min/2)**3 + sqrt((-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2) + 2*(-3*tS/2 - 3*t_n_a_min/2)**3 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*j_max))**2 - 4*(-9*tS*t_star - 9*t_n_a_min*t_star + 9*t_star**2 + (-3*tS/2 - 3*t_n_a_min/2)**2)**3)/2 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(4*j_max))**(1/3)) - (-1/2 + sqrt(3)*I/2)*(-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2)/2 + (-3*tS/2 - 3*t_n_a_min/2)**3 + sqrt((-(-27*tS/2 - 27*t_n_a_min/2)*(3*tS*t_star + 3*t_n_a_min*t_star - 3*t_star**2) + 2*(-3*tS/2 - 3*t_n_a_min/2)**3 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(2*j_max))**2 - 4*(-9*tS*t_star - 9*t_n_a_min*t_star + 9*t_star**2 + (-3*tS/2 - 3*t_n_a_min/2)**2)**3)/2 + 27*(-a_0*tS**2 - 3*a_0*tS*t_n_a_min + a_min*tS**2 + 3*a_min*tS*t_n_a_min - 6*a_min*tS*t_star - 6*a_min*t_n_a_min*t_star + 6*a_min*t_star**2 - 3*j_max*tS*t_star**2 - 3*j_max*t_n_a_min*t_star**2 + 4*j_max*t_star**3 - j_min*tS**2*t_n_a_min + j_min*t_n_a_min**3 - 12*p_0 + 12*p_max - 6*tS*v_0 - 6*t_n_a_min*v_0)/(4*j_max))**(1/3)/3)
        numSolution = 1   

        t_u_expr = t_u_expr.args[numSolution]

    else:
        t_u_expr = None


    if not compileCode or not a_1_positionBoundedVelocityContinuousAllPhases and loadExpressions:
        a_1_expr = -(a_0*tS - a_min*tS - 2*a_min*t_n_a_min + 2*a_min*t_star + j_max*t_star**2 - 2*j_max*t_star*t_u + j_max*t_u**2 - j_min*tS*t_n_a_min + j_min*t_n_a_min**2 + 2*v_0)/(2*t_n_a_min)
    else:
        a_1_expr = None

    if compileCode:
        if not a_1_positionBoundedVelocityContinuousAllPhases:
            a_1_positionBoundedVelocityContinuousAllPhases = compileOrRestoreExpression(a_1_expr,
                                                                          args=[j_min, j_max, a_0, a_min, v_0, tS, t_star, t_n_a_min, t_u],
                                                                          phaseAndVariable="pos_all_bounded_vel_continuous_a1",
                                                                          minMax=-1, expressionNumber=-1)
        if not t_u_positionBoundedVelocityContinuousAllPhases:
            t_u_positionBoundedVelocityContinuousAllPhases = compileOrRestoreExpression(t_u_expr,
                                                                                        args=[j_min, j_max, a_0, a_min, v_0, p_0, p_max, tS, t_star, t_n_a_min],
                                                                                        phaseAndVariable="pos_all_bounded_vel_continuous_tu",
                                                                                        minMax=-1, expressionNumber=-1, complexResult=True)

        t_u_out = t_u_positionBoundedVelocityContinuousAllPhases(j_min_in, j_max_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in, t_star_in, t_n_a_min_in)

        if np.abs(np.imag(t_u_out)) < 1e-8:
            t_u_out = np.real(t_u_out)
        else:
            t_u_out = float('nan')

        if compute_a_1:
            a_1_out = a_1_positionBoundedVelocityContinuousAllPhases(j_min_in, j_max_in, a_0_in, a_min_in, v_0_in, tS_in, t_star_in,
                                                                     t_n_a_min_in, t_u_out)
        else:
            a_1_out = float('nan')

    else:
        t_u_out = t_u_expr.evalf(subs={j_min: j_min_in, j_max: j_max_in, a_0: a_0_in, a_min: a_min_in, v_0: v_0_in,
                                       p_0: p_0_in, p_max: p_max_in, tS: tS_in, t_star: t_star_in,
                                       t_n_a_min: t_n_a_min_in})

        if t_u_out.is_real or abs(im(t_u_out)) < 1e-8:
            t_u_out = re(t_u_out)
        else:
            t_u_out = float('nan')


        if compute_a_1:
            a_1_out = a_1_expr.evalf(subs={j_min: j_min_in, j_max: j_max_in, a_0: a_0_in, a_min: a_min_in,
                                       v_0: v_0_in, tS: tS_in, t_star: t_star_in, t_n_a_min: t_n_a_min_in, t_u: t_u_out})
        else:
            a_1_out = float('nan')

    
    

    return a_1_out, t_u_out

def positionBoundedVelocityDiscreteAllPhases(j_min_in, j_max_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in,
                                             t_star_in, t_n_a_min_in, t_n_u_in):
    

    global j_n_u_plus_1_positionBoundedVelocityDiscreteAllPhases
    global a_1_positionBoundedVelocityDiscreteAllPhases


    if not compileCode or not j_n_u_plus_1_positionBoundedVelocityDiscreteAllPhases            or not a_1_positionBoundedVelocityDiscreteAllPhases:
        a_0, a_1, a_min, v_0, j_n_u_plus_1, j_min, j_max, p_0, p_max, tS, t_n_a_min, t_n_u, t_star, t = symbols('a_0 a_1 a_min v_0  j_n_u_plus_1 j_min j_max p_0 p_max tS t_n_a_min t_n_u t_star t')

    if not compileCode or not j_n_u_plus_1_positionBoundedVelocityDiscreteAllPhases and loadExpressions:
        j_n_u_plus_1_expr = FiniteSet((a_0*tS**2 + 3*a_0*tS*t_n_a_min - a_min*tS**2 - 3*a_min*tS*t_n_a_min + 6*a_min*tS*t_star + 6*a_min*t_n_a_min*t_star - 6*a_min*t_star**2 + j_max*tS**3 + 3*j_max*tS**2*t_n_a_min - 6*j_max*tS**2*t_star + 6*j_max*tS*t_n_a_min*t_n_u - 6*j_max*tS*t_n_a_min*t_star - 3*j_max*tS*t_n_u**2 - 6*j_max*tS*t_n_u*t_star + 9*j_max*tS*t_star**2 + 3*j_max*t_n_a_min*t_n_u**2 - 6*j_max*t_n_a_min*t_n_u*t_star + 3*j_max*t_n_a_min*t_star**2 - 2*j_max*t_n_u**3 + 6*j_max*t_n_u*t_star**2 - 4*j_max*t_star**3 + j_min*tS**2*t_n_a_min - j_min*t_n_a_min**3 + 12*p_0 - 12*p_max + 6*tS*v_0 + 6*t_n_a_min*v_0)/(tS*(tS**2 + 3*tS*t_n_a_min - 6*tS*t_star + 6*t_n_a_min*t_n_u - 6*t_n_a_min*t_star - 6*t_n_u**2 + 6*t_star**2)))
        j_n_u_plus_1_expr = j_n_u_plus_1_expr.args[0]  

    else:
        j_n_u_plus_1_expr = None


    if not compileCode or not a_1_positionBoundedVelocityDiscreteAllPhases and loadExpressions:
        a_1_expr = -(a_0*tS - a_min*tS - 2*a_min*t_n_a_min + 2*a_min*t_star + j_max*tS**2 + 2*j_max*tS*t_n_u - 2*j_max*tS*t_star + j_max*t_n_u**2 - 2*j_max*t_n_u*t_star + j_max*t_star**2 - j_min*tS*t_n_a_min + j_min*t_n_a_min**2 - j_n_u_plus_1*tS**2 - 2*j_n_u_plus_1*tS*t_n_u + 2*j_n_u_plus_1*tS*t_star + 2*v_0)/(2*t_n_a_min)
    else:
        a_1_expr = None

    if compileCode:
        if not a_1_positionBoundedVelocityDiscreteAllPhases:
            a_1_positionBoundedVelocityDiscreteAllPhases = compileOrRestoreExpression(a_1_expr,
                                                                          args=[j_min, j_max, j_n_u_plus_1, a_0, a_min, v_0, tS, t_star, t_n_a_min, t_n_u],
                                                                          phaseAndVariable="pos_all_bounded_vel_discrete_a1",
                                                                          minMax=-1, expressionNumber=-1)

        if not j_n_u_plus_1_positionBoundedVelocityDiscreteAllPhases:
            j_n_u_plus_1_positionBoundedVelocityDiscreteAllPhases = compileOrRestoreExpression(j_n_u_plus_1_expr,
                                                                                        args=[j_min, j_max, a_0, a_min, v_0, p_0, p_max, tS, t_star, t_n_a_min, t_n_u],
                                                                                        phaseAndVariable="pos_all_bounded_vel_discrete_j_n_u_plus_1",
                                                                                        minMax=-1, expressionNumber=-1)

        j_n_u_plus_1_out = j_n_u_plus_1_positionBoundedVelocityDiscreteAllPhases(j_min_in, j_max_in, a_0_in, a_min_in, v_0_in, p_0_in, p_max_in, tS_in, t_star_in, t_n_a_min_in, t_n_u_in)

        if np.abs(np.imag(j_n_u_plus_1_out)) < 1e-8:
            j_n_u_plus_1_out = np.real(j_n_u_plus_1_out)
        else:
            j_n_u_plus_1_out = float('nan')

        a_1_out = a_1_positionBoundedVelocityDiscreteAllPhases(j_min_in, j_max_in, j_n_u_plus_1_out, a_0_in, a_min_in, v_0_in, tS_in, t_star_in,
                                                               t_n_a_min_in, t_n_u_in)


    else:
        j_n_u_plus_1_out = j_n_u_plus_1_expr.evalf(subs={j_min: j_min_in, j_max: j_max_in, a_0: a_0_in, a_min: a_min_in, v_0: v_0_in,
                                       p_0: p_0_in, p_max: p_max_in, tS: tS_in, t_star: t_star_in,
                                       t_n_a_min: t_n_a_min_in, t_n_u: t_n_u_in})

        if j_n_u_plus_1_out.is_real or abs(im(j_n_u_plus_1_out)) < 1e-8:
            j_n_u_plus_1_out = re(j_n_u_plus_1_out)
        else:
            j_n_u_plus_1_out = float('nan')


        a_1_out = a_1_expr.evalf(subs={j_min: j_min_in, j_max: j_max_in, j_n_u_plus_1: j_n_u_plus_1_out, a_0: a_0_in,
                                       a_min: a_min_in, v_0: v_0_in, tS: tS_in, t_star: t_star_in,
                                       t_n_a_min: t_n_a_min_in, t_n_u: t_n_u_in})

    return a_1_out, j_n_u_plus_1_out


def positionBoundedVelocityContinuousMinJerkPhase(j_min_in, j_max_in, a_0_in, v_0_in, p_0_in, p_max_in, tS_in,
                                                  t_star_in):

    global t_u_positionBoundedVelocityContinuousMinJerkPhase
    global a_1_positionBoundedVelocityContinuousMinJerkPhase

    compute_a_1 = True  

    if not compileCode or not t_u_positionBoundedVelocityContinuousMinJerkPhase or not a_1_positionBoundedVelocityContinuousMinJerkPhase:
        a_0, a_1, a_min, v_0, j_min, j_max, p_0, p_max, tS, t_u, t_star, t = symbols('a_0 a_1 a_min v_0 j_min j_max p_0 p_max tS t_u t_star t')

    if not compileCode or not t_u_positionBoundedVelocityContinuousMinJerkPhase and loadExpressions:
        t_u_expr = FiniteSet(-(-3*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star) + (-tS**2 + 3*t_star**2)**2/(tS - 2*t_star)**2)/(3*(sqrt(-4*(-3*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star) + (-tS**2 + 3*t_star**2)**2/(tS - 2*t_star)**2)**3 + (27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star)**2 + 2*(-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**2)/2 + 27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(2*(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star)) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(2*(tS - 2*t_star)**2) + (-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**(1/3)) - (sqrt(-4*(-3*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star) + (-tS**2 + 3*t_star**2)**2/(tS - 2*t_star)**2)**3 + (27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star)**2 + 2*(-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**2)/2 + 27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(2*(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star)) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(2*(tS - 2*t_star)**2) + (-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**(1/3)/3 - (-tS**2 + 3*t_star**2)/(3*(tS - 2*t_star)), -(-3*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star) + (-tS**2 + 3*t_star**2)**2/(tS - 2*t_star)**2)/(3*(-1/2 - sqrt(3)*I/2)*(sqrt(-4*(-3*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star) + (-tS**2 + 3*t_star**2)**2/(tS - 2*t_star)**2)**3 + (27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star)**2 + 2*(-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**2)/2 + 27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(2*(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star)) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(2*(tS - 2*t_star)**2) + (-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**(1/3)) - (-1/2 - sqrt(3)*I/2)*(sqrt(-4*(-3*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star) + (-tS**2 + 3*t_star**2)**2/(tS - 2*t_star)**2)**3 + (27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star)**2 + 2*(-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**2)/2 + 27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(2*(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star)) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(2*(tS - 2*t_star)**2) + (-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**(1/3)/3 - (-tS**2 + 3*t_star**2)/(3*(tS - 2*t_star)), -(-3*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star) + (-tS**2 + 3*t_star**2)**2/(tS - 2*t_star)**2)/(3*(-1/2 + sqrt(3)*I/2)*(sqrt(-4*(-3*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star) + (-tS**2 + 3*t_star**2)**2/(tS - 2*t_star)**2)**3 + (27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star)**2 + 2*(-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**2)/2 + 27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(2*(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star)) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(2*(tS - 2*t_star)**2) + (-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**(1/3)) - (-1/2 + sqrt(3)*I/2)*(sqrt(-4*(-3*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star) + (-tS**2 + 3*t_star**2)**2/(tS - 2*t_star)**2)**3 + (27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(tS - 2*t_star)**2 + 2*(-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**2)/2 + 27*(-2*a_0*tS**2*t_star + 3*a_0*tS*t_star**2 - j_max*tS**2*t_star**2 + 2*j_max*tS*t_star**3 - j_max*t_star**4 - 6*p_0*tS + 12*p_0*t_star + 6*p_max*tS - 12*p_max*t_star - 2*tS**2*v_0 + 6*t_star**2*v_0)/(2*(j_max*tS - 2*j_max*t_star - j_min*tS + 2*j_min*t_star)) - 9*(-tS**2 + 3*t_star**2)*(2*tS**2*t_star - 3*tS*t_star**2)/(2*(tS - 2*t_star)**2) + (-tS**2 + 3*t_star**2)**3/(tS - 2*t_star)**3)**(1/3)/3 - (-tS**2 + 3*t_star**2)/(3*(tS - 2*t_star)))
        numSolution = 1  
        
        
        if numSolution == 1 and compileCode:
            numSolution = 2
        else:
            if numSolution == 2 and compileCode:
                numSolution = 1

        t_u_expr = t_u_expr.args[numSolution]
        
    else:
        t_u_expr = None


    if not compileCode or not a_1_positionBoundedVelocityContinuousMinJerkPhase and loadExpressions:
        a_1_expr = (a_0*tS + j_max*t_star**2 - 2*j_max*t_star*t_u + j_max*t_u**2 + j_min*tS**2 - 2*j_min*tS*t_star + 2*j_min*t_star*t_u - j_min*t_u**2 + 2*v_0)/(tS - 2*t_star)
    else:
        a_1_expr = None

    if compileCode:
        if not a_1_positionBoundedVelocityContinuousMinJerkPhase:
            a_1_positionBoundedVelocityContinuousMinJerkPhase = compileOrRestoreExpression(a_1_expr,
                                                                          args=[j_min, j_max, a_0, v_0, tS, t_star, t_u],
                                                                          phaseAndVariable="pos_minJerk_bounded_vel_continuous_a1",
                                                                          minMax=-1, expressionNumber=-1)
        if not t_u_positionBoundedVelocityContinuousMinJerkPhase:
            t_u_positionBoundedVelocityContinuousMinJerkPhase = compileOrRestoreExpression(t_u_expr,
                                                                                           args=[j_min, j_max, a_0, v_0, p_0, p_max, tS, t_star],
                                                                                           phaseAndVariable="pos_minJerk_bounded_vel_continuous_tu",
                                                                                           minMax=-1, expressionNumber=-1, complexResult=True)

        t_u_out = t_u_positionBoundedVelocityContinuousMinJerkPhase(j_min_in, j_max_in, a_0_in, v_0_in, p_0_in, p_max_in, tS_in, t_star_in)

        if np.abs(np.imag(t_u_out)) < 1e-8:
            t_u_out = np.real(t_u_out)
        else:
            t_u_out = float('nan')
            

        if compute_a_1:
            a_1_out = a_1_positionBoundedVelocityContinuousMinJerkPhase(j_min_in, j_max_in, a_0_in, v_0_in, tS_in,
                                                                        t_star_in, t_u_out)
        else:
            a_1_out = float('nan')

    else:
        t_u_out = t_u_expr.evalf(subs={j_min: j_min_in, j_max: j_max_in, a_0: a_0_in, v_0: v_0_in,
                                       p_0: p_0_in, p_max: p_max_in, tS: tS_in, t_star: t_star_in})

        if t_u_out.is_real or abs(im(t_u_out)) < 1e-8:
            t_u_out = re(t_u_out)
        else:
            t_u_out = float('nan')
            


        if compute_a_1:
            a_1_out = a_1_expr.evalf(subs={j_min: j_min_in, j_max: j_max_in, a_0: a_0_in,
                                           v_0: v_0_in, tS: tS_in, t_star: t_star_in, t_u: t_u_out})
        else:
            a_1_out = float('nan')

    return a_1_out, t_u_out



def positionBoundedVelocityDiscreteMinJerkPhase(j_min_in, j_max_in, a_0_in, v_0_in, p_0_in, p_max_in, tS_in,
                                                t_star_in, t_n_u_in):
    

    global j_n_u_plus_1_positionBoundedVelocityDiscreteMinJerkPhase
    global a_1_positionBoundedVelocityDiscreteMinJerkPhase


    if not compileCode or not j_n_u_plus_1_positionBoundedVelocityDiscreteMinJerkPhase or not a_1_positionBoundedVelocityDiscreteMinJerkPhase:
        a_0, a_1, a_min, v_0, j_n_u_plus_1, j_min, j_max, p_0, p_max, tS, t_n_u, t_star, t = symbols('a_0 a_1 a_min v_0  j_n_u_plus_1 j_min j_max p_0 p_max tS t_n_u t_star t')

    if not compileCode or not j_n_u_plus_1_positionBoundedVelocityDiscreteMinJerkPhase and loadExpressions:
        j_n_u_plus_1_expr = FiniteSet(-(2*a_0*tS**2*t_star - 3*a_0*tS*t_star**2 - j_max*tS**3*t_n_u - 2*j_max*tS**2*t_n_u**2 + 4*j_max*tS**2*t_n_u*t_star + j_max*tS**2*t_star**2 - j_max*tS*t_n_u**3 + 6*j_max*tS*t_n_u**2*t_star - 3*j_max*tS*t_n_u*t_star**2 - 2*j_max*tS*t_star**3 + 2*j_max*t_n_u**3*t_star - 3*j_max*t_n_u**2*t_star**2 + j_max*t_star**4 - j_min*tS**2*t_n_u**2 + 2*j_min*tS**2*t_n_u*t_star + j_min*tS*t_n_u**3 - 3*j_min*tS*t_n_u*t_star**2 - 2*j_min*t_n_u**3*t_star + 3*j_min*t_n_u**2*t_star**2 + 6*p_0*tS - 12*p_0*t_star - 6*p_max*tS + 12*p_max*t_star + 2*tS**2*v_0 - 6*t_star**2*v_0)/(tS*t_n_u*(tS**2 + 3*tS*t_n_u - 6*tS*t_star - 6*t_n_u*t_star + 6*t_star**2)))
        j_n_u_plus_1_expr = j_n_u_plus_1_expr.args[0]  

    else:
        j_n_u_plus_1_expr = None


    if not compileCode or not a_1_positionBoundedVelocityDiscreteMinJerkPhase and loadExpressions:
        a_1_expr = (a_0*tS + j_max*tS**2 + 2*j_max*tS*t_n_u - 2*j_max*tS*t_star + j_max*t_n_u**2 - 2*j_max*t_n_u*t_star + j_max*t_star**2 + j_min*tS**2 - 2*j_min*tS*t_star - j_min*t_n_u**2 + 2*j_min*t_n_u*t_star - j_n_u_plus_1*tS**2 - 2*j_n_u_plus_1*tS*t_n_u + 2*j_n_u_plus_1*tS*t_star + 2*v_0)/(tS - 2*t_star)
    else:
        a_1_expr = None

    if compileCode:
        if not a_1_positionBoundedVelocityDiscreteMinJerkPhase:
            a_1_positionBoundedVelocityDiscreteMinJerkPhase = compileOrRestoreExpression(a_1_expr,
                                                                          args=[j_min, j_max, j_n_u_plus_1, a_0, v_0, tS, t_star, t_n_u],
                                                                          phaseAndVariable="pos_minJerk_bounded_vel_discrete_a1",
                                                                          minMax=-1, expressionNumber=-1)

        if not j_n_u_plus_1_positionBoundedVelocityDiscreteMinJerkPhase:
            j_n_u_plus_1_positionBoundedVelocityDiscreteMinJerkPhase = compileOrRestoreExpression(j_n_u_plus_1_expr,
                                                                                        args=[j_min, j_max, a_0, v_0, p_0, p_max, tS, t_star, t_n_u],
                                                                                        phaseAndVariable="pos_minJerk_bounded_vel_discrete_j_n_u_plus_1",
                                                                                        minMax=-1, expressionNumber=-1)

        j_n_u_plus_1_out = j_n_u_plus_1_positionBoundedVelocityDiscreteMinJerkPhase(j_min_in, j_max_in, a_0_in, v_0_in, p_0_in, p_max_in, tS_in, t_star_in, t_n_u_in)

        if np.abs(np.imag(j_n_u_plus_1_out)) < 1e-8:
            j_n_u_plus_1_out = np.real(j_n_u_plus_1_out)
        else:
            j_n_u_plus_1_out = float('nan')

        a_1_out = a_1_positionBoundedVelocityDiscreteMinJerkPhase(j_min_in, j_max_in, j_n_u_plus_1_out, a_0_in, v_0_in,
                                                                  tS_in, t_star_in, t_n_u_in)


    else:
        j_n_u_plus_1_out = j_n_u_plus_1_expr.evalf(subs={j_min: j_min_in, j_max: j_max_in, a_0: a_0_in, v_0: v_0_in,
                                                         p_0: p_0_in, p_max: p_max_in, tS: tS_in, t_star: t_star_in,
                                                         t_n_u: t_n_u_in})

        if j_n_u_plus_1_out.is_real or abs(im(j_n_u_plus_1_out)) < 1e-8:
            j_n_u_plus_1_out = re(j_n_u_plus_1_out)
        else:
            j_n_u_plus_1_out = float('nan')


        a_1_out = a_1_expr.evalf(subs={j_min: j_min_in, j_max: j_max_in, j_n_u_plus_1: j_n_u_plus_1_out, a_0: a_0_in,
                                       v_0: v_0_in, tS: tS_in, t_star: t_star_in, t_n_u: t_n_u_in})


    return a_1_out, j_n_u_plus_1_out

